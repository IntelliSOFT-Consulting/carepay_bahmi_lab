/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.12
 * Generated at: 2021-07-01 09:44:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.scripts;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tabs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("if (!document.getElementById) {\r\n");
      out.write("    document.getElementById = function() { return null; }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function initMenu() {\r\n");
      out.write("//alert(\"I am in initMenu()\");\r\n");
      out.write("    var menu = document.getElementById(\"menuList\");\r\n");
      out.write("    if (menu != null) { //diane added this check for null (for pages that don't have menu at top: Add, Edit etc.)\r\n");
      out.write("    var items = menu.getElementsByTagName(\"li\");\r\n");
      out.write("    for (var i=0; i < items.length; i++) {\r\n");
      out.write("        items[i].firstChild.myIndex = i;\r\n");
      out.write("        // retain any existing onclick handlers from menu-config.xml\r\n");
      out.write("        if (items[i].firstChild.onclick) {\r\n");
      out.write("            items[i].firstChild.onclick=function() { \r\n");
      out.write("                eval(items[this.myIndex].firstChild.getAttribute(\"onclick\"));\r\n");
      out.write("                setCookie(\"menuSelected\", this.myIndex); \r\n");
      out.write("                };\r\n");
      out.write("        } else {\r\n");
      out.write("            items[i].firstChild.onclick=function() { \r\n");
      out.write("                setCookie(\"menuSelected\", this.myIndex); \r\n");
      out.write("            };\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    activateMenu();\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function activateMenu() { \r\n");
      out.write("//alert(\"I am in activateMenu()\");\r\n");
      out.write("    var menu = document.getElementById(\"menuList\");\r\n");
      out.write("    var items = menu.getElementsByTagName(\"li\");\r\n");
      out.write("    \r\n");
      out.write("    //diane added this: check to see which menu (which of the menu tabs) we are on based on left side submenu\r\n");
      out.write("    var masterListsSubMenu = document.getElementById(\"masterListsSubMenu\");\r\n");
      out.write("    var qaEventManagementSubMenu = document.getElementById(\"qaEventManagementSubMenu\");\r\n");
      out.write("    var requestFormEntrySubMenu = document.getElementById(\"requestFormEntrySubMenu\");\r\n");
      out.write("    var resultManagementSubMenu = document.getElementById(\"resultManagementSubMenu\");\r\n");
      out.write("    var reportsSubMenu = document.getElementById(\"reportsSubMenu\");\r\n");
      out.write("    var masterListsItems;\r\n");
      out.write("    var qaEventManagementItems;\r\n");
      out.write("    var requestFormEntryItems;\r\n");
      out.write("    var resultManagementItems;\r\n");
      out.write("    var reportsItems;\r\n");
      out.write("    if (masterListsSubMenu != null) {\r\n");
      out.write("      masterListsItems = masterListsSubMenu.getElementsByTagName(\"li\");\r\n");
      out.write("    }\r\n");
      out.write("    if (qaEventManagementSubMenu != null) {\r\n");
      out.write("      qaEventManagementItems = qaEventManagementSubMenu.getElementsByTagName(\"li\");\r\n");
      out.write("    }\r\n");
      out.write("    if (requestFormEntrySubMenu != null) {\r\n");
      out.write("      requestFormEntryItems = requestFormEntrySubMenu.getElementsByTagName(\"li\");\r\n");
      out.write("    }\r\n");
      out.write("    if (resultManagementSubMenu != null) {\r\n");
      out.write("      resultManagementItems = resultManagementSubMenu.getElementsByTagName(\"li\");\r\n");
      out.write("    }\r\n");
      out.write("    if (reportsSubMenu != null) {\r\n");
      out.write("      reportsItems = reportsSubMenu.getElementsByTagName(\"li\");\r\n");
      out.write("    }\r\n");
      out.write("    //end of diane's addition\r\n");
      out.write("    \r\n");
      out.write("    var activeMenu;\r\n");
      out.write("    var found = 0;\r\n");
      out.write("    \r\n");
      out.write(" \t\r\n");
      out.write("    for (var i=0; i < items.length; i++) {\r\n");
      out.write("        var url = items[i].firstChild.getAttribute(\"href\");\r\n");
      out.write("        //alert(\"url \" + url);\r\n");
      out.write("        //alert(\"current \" + document.location.toString());\r\n");
      out.write("        var current = document.location.toString();\r\n");
      out.write("        \r\n");
      out.write(" \r\n");
      out.write("        \r\n");
      out.write("        if (current.indexOf(url) != -1) {\r\n");
      out.write("        //alert(\"Adding 1 to found\");\r\n");
      out.write("            found++;\r\n");
      out.write("        } \r\n");
      out.write("  \r\n");
      out.write("        \r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write(" \r\n");
      out.write("     \r\n");
      out.write("    // more than one found, use cookies\r\n");
      out.write("    if (found > 1 && getCookie(\"menuSelected\") != null) {  //diane added check for != null to fix bug\r\n");
      out.write("        var menuSelected = getCookie(\"menuSelected\"); \r\n");
      out.write("        //alert(\"menuSelected \" + getCookie(\"menuSelected\"));\r\n");
      out.write("        if (items[menuSelected].parentNode.className == \"submenu\") {\r\n");
      out.write("            items[menuSelected].firstChild.className=\"selected\";\r\n");
      out.write("            items[menuSelected].parentNode.parentNode.className=\"selected\";\r\n");
      out.write("        } else {            \r\n");
      out.write("            items[menuSelected].className+=\"selected\";\r\n");
      out.write("        }\r\n");
      out.write("    } else {\r\n");
      out.write("        // only one found, match on URL\r\n");
      out.write("        var current = document.location.toString();\r\n");
      out.write("\t\r\n");
      out.write("\tvar foundInUpperSubMenu = false; //diane added this\r\n");
      out.write("\tvar masterListsItem;//diane added this\r\n");
      out.write("    var qaEventManagementItem;//diane added this\r\n");
      out.write("\tvar requestFormEntryItem;//diane added this\r\n");
      out.write("    var resultManagementItem;//diane added this\r\n");
      out.write("    var reportsItem;//diane added this\r\n");
      out.write("\tfor (var i=0; i < items.length; i++) {\r\n");
      out.write("            var url = items[i].firstChild.getAttribute(\"href\");\r\n");
      out.write("            //diane added this: store masterListsItem\r\n");
      out.write("            if (url.indexOf('MasterListsPage.do') != -1) {\r\n");
      out.write("                masterListsItem = items[i];\r\n");
      out.write("            }\r\n");
      out.write("            if (url.indexOf('QaEventManagementPage.do') != -1) {\r\n");
      out.write("                qaEventManagementItem = items[i];\r\n");
      out.write("            }\r\n");
      out.write("            if (url.indexOf('RequestFormEntryPage.do') != -1) {\r\n");
      out.write("                requestFormEntryItem = items[i];\r\n");
      out.write("            }\r\n");
      out.write("            if (url.indexOf('ResultManagementPage.do') != -1) {\r\n");
      out.write("                resultManagementItem = items[i];\r\n");
      out.write("            }\r\n");
      out.write("             if (url.indexOf('ReportsPage.do') != -1) {\r\n");
      out.write("                reportsItem = items[i];\r\n");
      out.write("            }\r\n");
      out.write("            //end of diane's addition\r\n");
      out.write("            if (current.indexOf(url) != -1) {\r\n");
      out.write("                if (items[i].parentNode.className == \"submenu\") {\r\n");
      out.write("                    items[i].firstChild.className=\"selected\";\r\n");
      out.write("                    items[i].parentNode.parentNode.className=\"selected\";\r\n");
      out.write("                    foundInUpperSubMenu = true; //diane added this\r\n");
      out.write("                } else {            \r\n");
      out.write("                    items[i].className+=\"selected\";\r\n");
      out.write("                    foundInUpperSubMenu = true; //diane added this\r\n");
      out.write("                }\r\n");
      out.write("            } \r\n");
      out.write("         }\r\n");
      out.write("            //diane added this: we need to now look at the additional (left-side) submenu\r\n");
      out.write("             if (!foundInUpperSubMenu && masterListsItems != null) {\r\n");
      out.write("\t         masterListsItem.className+=\"selected\";\r\n");
      out.write("             }\r\n");
      out.write("             if (!foundInUpperSubMenu && qaEventManagementItems != null) {\r\n");
      out.write("\t         qaEventManagementItem.className+=\"selected\";\r\n");
      out.write("             }\r\n");
      out.write("             if (!foundInUpperSubMenu && requestFormEntryItems != null) {\r\n");
      out.write("\t         requestFormEntryItem.className+=\"selected\";\r\n");
      out.write("             }\r\n");
      out.write("             if (!foundInUpperSubMenu && resultManagementItems != null) {\r\n");
      out.write("\t         resultManagementItem.className+=\"selected\";\r\n");
      out.write("             }\r\n");
      out.write("             if (!foundInUpperSubMenu && reportsItems != null) {\r\n");
      out.write("\t         reportsItem.className+=\"selected\";\r\n");
      out.write("             }\r\n");
      out.write("            //end of diane's addition\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Select the menu that matches the URL when the page loads\r\n");
      out.write("window.onload=initMenu;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// =========================================================================\r\n");
      out.write("//                          Cookie functions \r\n");
      out.write("// =========================================================================\r\n");
      out.write("/* This function is used to set cookies */\r\n");
      out.write("function setCookie(name,value,expires,path,domain,secure) {\r\n");
      out.write("  document.cookie = name + \"=\" + escape (value) +\r\n");
      out.write("    ((expires) ? \"; expires=\" + expires.toGMTString() : \"\") +\r\n");
      out.write("    ((path) ? \"; path=\" + path : \"\") +\r\n");
      out.write("    ((domain) ? \"; domain=\" + domain : \"\") + ((secure) ? \"; secure\" : \"\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* This function is used to get cookies */\r\n");
      out.write("function getCookie(name) {\r\n");
      out.write("\tvar prefix = name + \"=\" \r\n");
      out.write("\tvar start = document.cookie.indexOf(prefix) \r\n");
      out.write("\r\n");
      out.write("\tif (start==-1) {\r\n");
      out.write("\t\treturn null;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar end = document.cookie.indexOf(\";\", start+prefix.length) \r\n");
      out.write("\tif (end==-1) {\r\n");
      out.write("\t\tend=document.cookie.length;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar value=document.cookie.substring(start+prefix.length, end) \r\n");
      out.write("\treturn unescape(value);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* This function is used to delete cookies */\r\n");
      out.write("function deleteCookie(name,path,domain) {\r\n");
      out.write("  if (getCookie(name)) {\r\n");
      out.write("    document.cookie = name + \"=\" +\r\n");
      out.write("      ((path) ? \"; path=\" + path : \"\") +\r\n");
      out.write("      ((domain) ? \"; domain=\" + domain : \"\") +\r\n");
      out.write("      \"; expires=Thu, 01-Jan-70 00:00:01 GMT\";\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
