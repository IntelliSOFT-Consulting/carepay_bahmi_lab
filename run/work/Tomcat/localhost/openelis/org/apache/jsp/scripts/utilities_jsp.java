/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.12
 * Generated at: 2021-07-01 06:49:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.scripts;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.struts.util.RequestUtils;
import org.apache.struts.action.*;
import org.apache.struts.Globals;
import java.util.Iterator;
import javax.servlet.jsp.JspException;
import us.mn.state.health.lims.common.action.IActionConstants;
import us.mn.state.health.lims.common.util.StringUtil;
import us.mn.state.health.lims.common.util.resources.ResourceLocator;

public final class utilities_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {



//bugzilla 1494
String errorMessagePhone = "";
String errorMessagePicklist = "";

String path = "";
String basePath = "";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');


path = request.getContextPath();
basePath = path + "/";

//bugzilla 1494
java.util.Locale locale = (java.util.Locale)request.getSession().getAttribute(org.apache.struts.Globals.LOCALE_KEY);
errorMessagePhone =
					us.mn.state.health.lims.common.util.resources.ResourceLocator.getInstance().getMessageResources().getMessage(
					locale,
                    "error.phone");
errorMessagePicklist =
					us.mn.state.health.lims.common.util.resources.ResourceLocator.getInstance().getMessageResources().getMessage(
					locale,
                    "error.picklist");

      out.write("\r\n");
      out.write("\r\n");
      out.write("var myFormName = '");
      out.print( (String)request.getAttribute(IActionConstants.FORM_NAME) );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var buttonClicked = false;\r\n");
      out.write("\r\n");
      out.write("function checkClicked(){\r\n");
      out.write("\t\tif (buttonClicked == false){\r\n");
      out.write("\t\t\tbuttonClicked = true;\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function clearClicked(){\r\n");
      out.write("\tbuttonClicked = false;\r\n");
      out.write("}\r\n");
      out.write("\t\r\n");
      out.write("function getSessionFromURL(url) {\r\n");
      out.write("\t var sessionIndex = url.indexOf(';');\r\n");
      out.write("\t var sessionid = '';\r\n");
      out.write("\t if(sessionIndex >= 0){\r\n");
      out.write("\t\t var queryIndex = url.indexOf('?');\r\n");
      out.write("\t\t var length = url.length;\r\n");
      out.write("\t\t if (queryIndex > sessionIndex) {\r\n");
      out.write("\t\t \tlength = queryIndex;\r\n");
      out.write("\t\t }\r\n");
      out.write("\t\t sessionid = url.substring(sessionIndex,length);\r\n");
      out.write("\t }\r\n");
      out.write("\t return sessionid;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function validate(form) {\r\n");
      out.write("/*validateForm is defined in each individual form (see project.jsp, organization.jsp)*/\r\n");
      out.write("   /*alert(\"I am in validate(form)\");*/\r\n");
      out.write("   var validated = validateForm(form);\r\n");
      out.write("   return validated;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function submitForm(form) {\r\n");
      out.write("//alert(\"I am in submitForm \" + form);\r\n");
      out.write("\tvar validated = true;\r\n");
      out.write("\tif ( form.action.indexOf('TestService')> 0)\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\telse{\r\n");
      out.write("\t\tif(!form.validateDocument){\r\n");
      out.write("\t\t//alert(\"I am in submitForm2\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(form.validateDocument.value == 'no') {\r\n");
      out.write("\t\t//alert(\"I am in submitForm3\");\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(window.validate)\r\n");
      out.write("\t\t{//alert(\"I am in submitForm4\");\r\n");
      out.write("\t\t\tvalidated = validate(form);\r\n");
      out.write("\t\r\n");
      out.write("\t\tif ( validated == false )\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t    //alert(\"I am in submitForm()5\");\r\n");
      out.write("\t\t\tclearClicked();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn validated;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function validateAndSubmitForm(form)\r\n");
      out.write("{//alert(\"I am in validateAndSubmitForm\");\r\n");
      out.write("\tif(submitForm(form))\r\n");
      out.write("\t{//alert(\"submitting form \" + form.action);\r\n");
      out.write("\t\tform.submit();\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1403 (dictionary entries with a plus sign are seen as invalid because not carried over properly)\r\n");
      out.write("function URLencode(sStr) {\r\n");
      out.write("    var retString = escape(sStr);\r\n");
      out.write("    //escape function misses +, ', \", / so we need to do these manually\r\n");
      out.write("    retString = retString.replace(/\\+/g, '%2B');\r\n");
      out.write("    retString = retString.replace(/\\-/g, '%2D');\r\n");
      out.write("    retString = retString.replace(/\\\"/g,'%22');\r\n");
      out.write("    retString = retString.replace(/\\'/g, '%27');\r\n");
      out.write("    retString = retString.replace(/\\//g,'%2F');\r\n");
      out.write("    return retString;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function replaceWhiteSpaceWithBlank(str) {\r\n");
      out.write("    var retString = str;\r\n");
      out.write("    if (retString != null && retString != '') {\r\n");
      out.write("     retString = retString.replace(/\\s/g, ' ');\r\n");
      out.write("    }\r\n");
      out.write("    return retString;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//Check if a date is less than current date \r\n");
      out.write("function lessThanCurrent(d) {\r\n");
      out.write("var dte = d.value;\r\n");
      out.write("var date = new Date(dte.substring(6,10),\r\n");
      out.write("                            dte.substring(0,2)-1,\r\n");
      out.write("                            dte.substring(3,5));\r\n");
      out.write("var today = new Date();\r\n");
      out.write("if (date > today) {\r\n");
      out.write("  return false;\r\n");
      out.write("} else {\r\n");
      out.write("  return true;\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 2437\r\n");
      out.write("function fromDateLessThanToDate(fromDate, toDate) {\r\n");
      out.write("  var from = fromDate.value;\r\n");
      out.write("  var to = toDate.value;\r\n");
      out.write("  var dateFrom = new Date(from.substring(6,10),\r\n");
      out.write("                            from.substring(0,2)-1,\r\n");
      out.write("                            from.substring(3,5));\r\n");
      out.write("  var dateTo = new Date(to.substring(6,10),\r\n");
      out.write("                            to.substring(0,2)-1,\r\n");
      out.write("                            to.substring(3,5));\r\n");
      out.write("  if (dateFrom < dateTo) {\r\n");
      out.write("    return true;\r\n");
      out.write("  } else {\r\n");
      out.write("    return false;\r\n");
      out.write("  }                   \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Begin\r\n");
      out.write("function checkTime(time)\r\n");
      out.write("  {\r\n");
      out.write("    var errorMsg = \"\";\r\n");
      out.write("    \r\n");
      out.write("   if (!time.value || time.value == '00:00') {\r\n");
      out.write("       time.value = '00:00';\r\n");
      out.write("       return true;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("   if (time.value.indexOf(':') < 0) {\r\n");
      out.write("   if (time.value.length == 2) {\r\n");
      out.write("       time.value = '0' + time.value;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   if (time.value.length ==3) {\r\n");
      out.write("       time.value = '0' + time.value;\r\n");
      out.write("   }\r\n");
      out.write("   if (time.value.length == 4) {\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("     var newTime = '';\r\n");
      out.write("     //insert colon\r\n");
      out.write("     for (i = 0; i < time.value.length; i++) \r\n");
      out.write("     { \r\n");
      out.write("       newTime += time.value.charAt(i); \r\n");
      out.write("       if (i == 1) { \r\n");
      out.write("         newTime += ':';\r\n");
      out.write("       }\r\n");
      out.write("     }\r\n");
      out.write("    time.value = newTime;\r\n");
      out.write("    }\r\n");
      out.write("    } else {\r\n");
      out.write("      var newTime = time.value;\r\n");
      out.write("      if (time.value.length == 3) {\r\n");
      out.write("        newTime = '00' + time.value;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      if (time.value.length == 4) {\r\n");
      out.write("        newTime = '0' + time.value;\r\n");
      out.write("      }\r\n");
      out.write("    time.value = newTime;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // regular expression to match required time format\r\n");
      out.write("    re = /^(\\d{1,2}):(\\d{2})(:00)?([ap]m)?$/;\r\n");
      out.write("    \r\n");
      out.write("    if(time.value != '') {\r\n");
      out.write("      if(regs = time.value.match(re)) {\r\n");
      out.write("        if(regs[3]) {\r\n");
      out.write("          // 12-hour time format with am/pm\r\n");
      out.write("          if(regs[1] < 1 || regs[1] > 12) {\r\n");
      out.write("            errorMsg = \"Invalid value for hours: \" + regs[1];\r\n");
      out.write("          }\r\n");
      out.write("        } else {\r\n");
      out.write("          // 24-hour time format\r\n");
      out.write("          if(regs[1] > 23) {\r\n");
      out.write("            errorMsg = \"Invalid value for hours: \" + regs[1];\r\n");
      out.write("          }\r\n");
      out.write("        }\r\n");
      out.write("        if(!errorMsg && regs[2] > 59) {\r\n");
      out.write("          errorMsg = \"Invalid value for minutes: \" + regs[2];\r\n");
      out.write("        }\r\n");
      out.write("      } else {\r\n");
      out.write("        errorMsg = \"Invalid time format: \" + time.value;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if(errorMsg != \"\") {\r\n");
      out.write("      //alert(errorMsg);\r\n");
      out.write("      //time.focus();\r\n");
      out.write("      return false;\r\n");
      out.write("    }\r\n");
      out.write("   \r\n");
      out.write("    return true;\r\n");
      out.write("  }\r\n");
      out.write("//  End -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// PickList script- By Sean Geraty (http://www.freewebs.com/sean_geraty/)\r\n");
      out.write("// Visit JavaScript Kit (http://www.javascriptkit.com) for this JavaScript and 100s more\r\n");
      out.write("// Please keep this notice intact\r\n");
      out.write("\r\n");
      out.write("// Control flags for list selection and sort sequence\r\n");
      out.write("// Sequence is on option value (first 2 chars - can be stripped off in form processing)\r\n");
      out.write("// It is assumed that the select list is in sort sequence initially\r\n");
      out.write("var singleSelect = true;  // Allows an item to be selected once only\r\n");
      out.write("var sortSelect = true;  // Only effective if above flag set to true\r\n");
      out.write("var sortPick = true;  // Will order the picklist in sort sequence\r\n");
      out.write("\r\n");
      out.write("// Initialize - invoked on load\r\n");
      out.write("function initIt() {\r\n");
      out.write("//alert(\"Here I am initIt\");\r\n");
      out.write("  var selectList = document.getElementById(\"SelectList\");\r\n");
      out.write("  var selectOptions = selectList.options;\r\n");
      out.write("  var selectIndex = selectList.selectedIndex;\r\n");
      out.write("  var pickList = document.getElementById(\"PickList\");\r\n");
      out.write("  var pickOptions = pickList.options;\r\n");
      out.write("  pickOptions[0] = null;  // Remove initial entry from picklist (was only used to set default width)\r\n");
      out.write("  if (!(selectIndex > -1)) {\r\n");
      out.write("    selectOptions[0].selected = true;  // Set first selected on load\r\n");
      out.write("    selectOptions[0].defaultSelected = true;  // In case of reset/reload\r\n");
      out.write("  }\r\n");
      out.write("  selectList.focus();  // Set focus on the selectlist\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Adds a selected item into the picklist by selected value (not by index)\r\n");
      out.write("//bugzilla 1844: added includeSorting\r\n");
      out.write("function reselectOnRedisplay(id, includeSorting) {\r\n");
      out.write("//alert(\"Here I am reselectOnRedisplay\");\r\n");
      out.write("  var selectList = document.getElementById(\"SelectList\");\r\n");
      out.write("  var selectIndex = 0; //need to find out how to get index from id and select it\r\n");
      out.write("  var selectOptions = selectList.options;\r\n");
      out.write("  var pickList = document.getElementById(\"PickList\");\r\n");
      out.write("  var pickOptions = pickList.options;\r\n");
      out.write("  var pickOLength = pickOptions.length;\r\n");
      out.write("  \r\n");
      out.write("  var textToSelect = '';\r\n");
      out.write("  var sortFieldAToSelect;\r\n");
      out.write("  var sortFieldBToSelect;\r\n");
      out.write("  for (var i =0; i < selectOptions.length; i++) {\r\n");
      out.write("     if (selectOptions[i].value == id) {\r\n");
      out.write("        textToSelect = selectOptions[i].text;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         sortFieldAToSelect = selectOptions[i].sortFieldA;\r\n");
      out.write("         sortFieldBToSelect = selectOptions[i].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        if (singleSelect) {\r\n");
      out.write("           selectOptions[i] = null;\r\n");
      out.write("        }\r\n");
      out.write("     }\r\n");
      out.write("  }\r\n");
      out.write("  // An item must be selected\r\n");
      out.write("  pickOptions[pickOLength] = new Option(textToSelect);\r\n");
      out.write("  pickOptions[pickOLength].value = id;\r\n");
      out.write("  if (includeSorting) {\r\n");
      out.write("   pickOptions[pickOLength].sortFieldA = sortFieldAToSelect;\r\n");
      out.write("   pickOptions[pickOLength].sortFieldB = sortFieldBToSelect;\r\n");
      out.write("  }\r\n");
      out.write("  if (sortPick) {\r\n");
      out.write("      var tempText;\r\n");
      out.write("      var tempValue;\r\n");
      out.write("      var tempSortFieldA;\r\n");
      out.write("      var tempSortFieldB;\r\n");
      out.write("      \r\n");
      out.write("      // Sort the pick list\r\n");
      out.write("      while (pickOLength > 0 && pickOptions[pickOLength].value < pickOptions[pickOLength-1].value) {\r\n");
      out.write("        tempText = pickOptions[pickOLength-1].text;\r\n");
      out.write("        tempValue = pickOptions[pickOLength-1].value;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         tempSortFieldA = pickOptions[pickOLength-1].sortFieldA;\r\n");
      out.write("         tempSortFieldB = pickOptions[pickOLength-1].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        pickOptions[pickOLength-1].text = pickOptions[pickOLength].text;\r\n");
      out.write("        pickOptions[pickOLength-1].value = pickOptions[pickOLength].value;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         pickOptions[pickOLength-1].sortFieldA = pickOptions[pickOLength].sortFieldA;\r\n");
      out.write("         pickOptions[pickOLength-1].sortFieldB = pickOptions[pickOLength].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        pickOptions[pickOLength].text = tempText;\r\n");
      out.write("        pickOptions[pickOLength].value = tempValue;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         pickOptions[pickOLength].sortFieldA = tempSortFieldA;\r\n");
      out.write("         pickOptions[pickOLength].sortFieldB = tempSortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        pickOLength = pickOLength - 1;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    pickOLength = pickOptions.length;\r\n");
      out.write(" \r\n");
      out.write("  selectOptions[0].selected = true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//benzd1 bugzilla 2293, 1844 (replacing 1776)\r\n");
      out.write("//this is to be used with sortableOptions or sortableOptionCollections tag\r\n");
      out.write("function sort(id, sortType, toggleAlternateLabel){\r\n");
      out.write("  var beginIndex = 0;\r\n");
      out.write("  var theOptions;\r\n");
      out.write("  var listObject=document.getElementById(id);\r\n");
      out.write("  //the sorting needs to begin at first AssignableTest of type test (panels are sorted to the top)\r\n");
      out.write("  theOptions = listObject.options;\r\n");
      out.write("  var oLength = theOptions.length;\r\n");
      out.write("  if (oLength < 1) {  \r\n");
      out.write("    return false;\r\n");
      out.write("}\r\n");
      out.write("  for (var i = 0; i < oLength; i++) {\r\n");
      out.write("    if (listObject[i].type == sortType) {\r\n");
      out.write("      beginIndex = i;\r\n");
      out.write("      break;\r\n");
      out.write("\t\t\t}\t  \t \r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("  listArray=new Array();\r\n");
      out.write("  \r\n");
      out.write("  for (var indx=beginIndex;\tindx < listObject.options.length;\tindx++){\r\n");
      out.write("   listArray[indx-beginIndex]=listObject.options[indx];\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  listArray=listArray.sort(sortOptions);\r\n");
      out.write("  for (indx=0; indx < listArray.length; indx++){\r\n");
      out.write("    listObject.options[indx+beginIndex]=new Option(listArray[indx].text,listArray[indx].value,true,true);\r\n");
      out.write("    listObject.options[indx+beginIndex].type = listArray[indx].type;\r\n");
      out.write("    listObject.options[indx+beginIndex].sortFieldA = listArray[indx].sortFieldA;\r\n");
      out.write("    listObject.options[indx+beginIndex].sortFieldB = listArray[indx].sortFieldB;\r\n");
      out.write("    if (toggleAlternateLabel) {\r\n");
      out.write("      var originalLabel = listArray[indx].label;\r\n");
      out.write("      listObject.options[indx+beginIndex].label = listArray[indx].alternateLabel;\r\n");
      out.write("      listObject.options[indx+beginIndex].alternateLabel = originalLabel;\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("  listObject.selectedIndex=0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1844, 2293\r\n");
      out.write("//toggle back and forth between sort by sortFieldA and sortFieldB\r\n");
      out.write("function sortOptions(optionA,optionB){\r\n");
      out.write(" if (sortOrder == 'sortFieldB') {\r\n");
      out.write("  optA=optionA.sortFieldB.toLowerCase();\r\n");
      out.write("  optB=optionB.sortFieldB.toLowerCase();\r\n");
      out.write(" } else {\r\n");
      out.write("  optA=optionA.sortFieldA.toLowerCase();\r\n");
      out.write("  optB=optionB.sortFieldA.toLowerCase();\r\n");
      out.write("\t}\t\r\n");
      out.write("  if (optA<optB){ return -1; }\r\n");
      out.write("  if (optA>optB){ return 1; }\r\n");
      out.write("  return 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// Adds a selected item into the picklist\r\n");
      out.write("//bugzilla 1844, 2293 modified to allow sorting and distinguishing between panels and indiv. tests\r\n");
      out.write("function addIt(includeSorting) {\r\n");
      out.write("//alert(\"Here I am addIt\");\r\n");
      out.write("  var selectList = document.getElementById(\"SelectList\");\r\n");
      out.write("  var selectIndex = selectList.selectedIndex;\r\n");
      out.write("  var selectOptions = selectList.options;\r\n");
      out.write("  var pickList = document.getElementById(\"PickList\");\r\n");
      out.write("  var pickOptions = pickList.options;\r\n");
      out.write("  var pickOLength = pickOptions.length;\r\n");
      out.write("  // An item must be selected\r\n");
      out.write("  while (selectIndex > -1) {\r\n");
      out.write("    pickOptions[pickOLength] = new Option(selectList[selectIndex].text);\r\n");
      out.write("    pickOptions[pickOLength].value = selectList[selectIndex].value;\r\n");
      out.write("    if (includeSorting) {\r\n");
      out.write("     pickOptions[pickOLength].type = selectList[selectIndex].type;\r\n");
      out.write("     pickOptions[pickOLength].sortFieldA = selectList[selectIndex].sortFieldA;\r\n");
      out.write("     pickOptions[pickOLength].sortFieldB = selectList[selectIndex].sortFieldB;\r\n");
      out.write("    }\r\n");
      out.write("    // If single selection, remove the item from the select list\r\n");
      out.write("    if (singleSelect) {\r\n");
      out.write("      selectOptions[selectIndex] = null;\r\n");
      out.write("    }\r\n");
      out.write("    if (sortPick) {\r\n");
      out.write("      var tempText;\r\n");
      out.write("      var tempValue;\r\n");
      out.write("      var tempType;\r\n");
      out.write("      var tempSortFieldA;\r\n");
      out.write("      var tempSortFieldB;\r\n");
      out.write("      // Sort the pick list\r\n");
      out.write("      while (pickOLength > 0 && pickOptions[pickOLength].value < pickOptions[pickOLength-1].value) {\r\n");
      out.write("        tempText = pickOptions[pickOLength-1].text;\r\n");
      out.write("        tempValue = pickOptions[pickOLength-1].value;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         tempType = pickOptions[pickOLength-1].type;\r\n");
      out.write("         tempSortFieldA = pickOptions[pickOLength-1].sortFieldA;\r\n");
      out.write("         tempSortFieldB = pickOptions[pickOLength-1].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        pickOptions[pickOLength-1].text = pickOptions[pickOLength].text;\r\n");
      out.write("        pickOptions[pickOLength-1].value = pickOptions[pickOLength].value;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         pickOptions[pickOLength-1].type = pickOptions[pickOLength].type;\r\n");
      out.write("         pickOptions[pickOLength-1].sortFieldA = pickOptions[pickOLength].sortFieldA;\r\n");
      out.write("         pickOptions[pickOLength-1].sortFieldB = pickOptions[pickOLength].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("                \r\n");
      out.write("        pickOptions[pickOLength].text = tempText;\r\n");
      out.write("        pickOptions[pickOLength].value = tempValue;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         pickOptions[pickOLength].type = tempType;\r\n");
      out.write("         pickOptions[pickOLength].sortFieldA = tempSortFieldA;\r\n");
      out.write("         pickOptions[pickOLength].sortFieldB = tempSortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        pickOLength = pickOLength - 1;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    selectIndex = selectList.selectedIndex;\r\n");
      out.write("    pickOLength = pickOptions.length;\r\n");
      out.write("  }\r\n");
      out.write("  selectOptions[0].selected = true;\r\n");
      out.write("  if (includeSorting) {\r\n");
      out.write("    sort('PickList');\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Deletes an item from the picklist\r\n");
      out.write("//bugzilla 1844, 2293 modified to allow sorting and distinguishing between panels and indiv. tests\r\n");
      out.write("function delIt(includeSorting) {\r\n");
      out.write("//alert(\"Here I am delIt\");\r\n");
      out.write("  var selectList = document.getElementById(\"SelectList\");\r\n");
      out.write("  var selectOptions = selectList.options;\r\n");
      out.write("  var selectOLength = selectOptions.length;\r\n");
      out.write("  var pickList = document.getElementById(\"PickList\");\r\n");
      out.write("  var pickIndex = pickList.selectedIndex;\r\n");
      out.write("  var pickOptions = pickList.options;\r\n");
      out.write("  while (pickIndex > -1) {\r\n");
      out.write("    // If single selection, replace the item in the select list\r\n");
      out.write("    if (singleSelect) {\r\n");
      out.write("      selectOptions[selectOLength] = new Option(pickList[pickIndex].text);\r\n");
      out.write("      selectOptions[selectOLength].value = pickList[pickIndex].value;\r\n");
      out.write("      if (includeSorting) {\r\n");
      out.write("       selectOptions[selectOLength].type = pickList[pickIndex].type;\r\n");
      out.write("       selectOptions[selectOLength].sortFieldA = pickList[pickIndex].sortFieldA;\r\n");
      out.write("       selectOptions[selectOLength].sortFieldB = pickList[pickIndex].sortFieldB;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    pickOptions[pickIndex] = null;\r\n");
      out.write("    if (singleSelect && sortSelect) {\r\n");
      out.write("      var tempText;\r\n");
      out.write("      var tempValue;\r\n");
      out.write("      var tempType;\r\n");
      out.write("      var tempSortFieldA;\r\n");
      out.write("      var tempSortFieldB;\r\n");
      out.write("      \r\n");
      out.write("      // Re-sort the select list\r\n");
      out.write("      while (selectOLength > 0 && selectOptions[selectOLength].value < selectOptions[selectOLength-1].value) {\r\n");
      out.write("        tempText = selectOptions[selectOLength-1].text;\r\n");
      out.write("        tempValue = selectOptions[selectOLength-1].value;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         tempType = selectOptions[selectOLength-1].type;\r\n");
      out.write("         tempSortFieldA = selectOptions[selectOLength-1].sortFieldA;\r\n");
      out.write("         tempSortFieldB = selectOptions[selectOLength-1].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        selectOptions[selectOLength-1].text = selectOptions[selectOLength].text;\r\n");
      out.write("        selectOptions[selectOLength-1].value = selectOptions[selectOLength].value;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         selectOptions[selectOLength-1].type = selectOptions[selectOLength].type;\r\n");
      out.write("         selectOptions[selectOLength-1].sortFieldA = selectOptions[selectOLength].sortFieldA;\r\n");
      out.write("         selectOptions[selectOLength-1].sortFieldB = selectOptions[selectOLength].sortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        selectOptions[selectOLength].text = tempText;\r\n");
      out.write("        selectOptions[selectOLength].value = tempValue;\r\n");
      out.write("        if (includeSorting) {\r\n");
      out.write("         selectOptions[selectOLength].type = tempType;\r\n");
      out.write("         selectOptions[selectOLength].sortFieldA = tempSortFieldA;\r\n");
      out.write("         selectOptions[selectOLength].value = tempSortFieldB;\r\n");
      out.write("        }\r\n");
      out.write("        selectOLength = selectOLength - 1;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    pickIndex = pickList.selectedIndex;\r\n");
      out.write("    selectOLength = selectOptions.length;\r\n");
      out.write("  }\r\n");
      out.write("  if (includeSorting) {\r\n");
      out.write("    sort('SelectList');\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Selection - invoked on submit\r\n");
      out.write("function selIt(btn) {\r\n");
      out.write("//alert(\"Here I am selIt\");\r\n");
      out.write("  var pickList = document.getElementById(\"PickList\");\r\n");
      out.write("  var pickOptions = pickList.options;\r\n");
      out.write("  var pickOLength = pickOptions.length;\r\n");
      out.write("  if (pickOLength < 1) {\r\n");
      out.write("  //bugzilla 1494\r\n");
      out.write("    alert('");
      out.print(errorMessagePicklist);
      out.write("');\r\n");
      out.write("    return false;\r\n");
      out.write("  }\r\n");
      out.write("  for (var i = 0; i < pickOLength; i++) {\r\n");
      out.write("    pickOptions[i].selected = true;\r\n");
      out.write("  }\r\n");
      out.write("  return true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//POPUP STUFF\r\n");
      out.write("\r\n");
      out.write("// Default window width for tree select popup\r\n");
      out.write("var popupWidth  = 750;\r\n");
      out.write("\r\n");
      out.write("// Default window width for tree select popup\r\n");
      out.write("var popUpHeight = 550;\r\n");
      out.write("\r\n");
      out.write("// Default window width for lookup popup\r\n");
      out.write("var lookupPopupWidth  = 580;\r\n");
      out.write("\r\n");
      out.write("// Default window width for tlookup popup\r\n");
      out.write("var lookupPopUpHeight = 355;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// Select popup opener form reference\r\n");
      out.write("var parentForm = null;\r\n");
      out.write("\r\n");
      out.write("// Select popup opener field reference\r\n");
      out.write("var parentField = null;\r\n");
      out.write("\r\n");
      out.write("//Lookup popup opener field reference\r\n");
      out.write("var lookupDisplayField = null;\r\n");
      out.write("\r\n");
      out.write("//Lookup popup opener field reference\r\n");
      out.write("var lookupHiddenField = null;\r\n");
      out.write("\r\n");
      out.write("var popupWindow = null;\r\n");
      out.write("\r\n");
      out.write("//var buttonClicked = false;\r\n");
      out.write("\r\n");
      out.write("// Array used to store form section toggle state\r\n");
      out.write("//var formSectionState;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function windowFocus() {\r\n");
      out.write("\tif (popupWindow != null && popupWindow.closed == false) {\r\n");
      out.write("\t\tpopupWindow.focus();\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function windowClose() {\r\n");
      out.write("\tif (popupWindow != null && popupWindow.closed == false) {\r\n");
      out.write("\t\tpopupWindow.close();\r\n");
      out.write("\t}\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function createPopup(pageAddress, width, height)\r\n");
      out.write("{\r\n");
      out.write("\t//alert(\"^^^\" + pageAddress);\r\n");
      out.write("\tif (width == null) {\r\n");
      out.write("\t\twidth = popupWidth;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (height == null) {\r\n");
      out.write("\t\theight = popUpHeight;\r\n");
      out.write("\t}\r\n");
      out.write("\t\tvar xOffset = (window.screen.width  - width)/2;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar yOffset = 0;\r\n");
      out.write("\t\tif(xOffset < 0)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\txOffset = 0;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar windowParams = null;\r\n");
      out.write("\t\t//IE\r\n");
      out.write("\t\tif(window.navigator.appName =='Microsoft Internet Explorer')\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\twindowParams = 'width=' + width + ',height=' + height +',status=yes,resizable=yes,scrollbars=yes,left='+ xOffset +',top=60';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse //Netscape\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\twindowParams = 'width=' + width + ',height=' + height +',status=yes,resizable=yes,scrollbars=yes,pageXOffset='+ xOffset +',pageYOffset=60';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//get the two digit random number and append it to window name\r\n");
      out.write("\t\tvar randNumStr = new String(Math.random());\t\t\t\r\n");
      out.write("\t\trandNum = randNumStr.substr(randNumStr.indexOf(\".\")+1, 2);\r\n");
      out.write("\t\tvar myNewWindowName = \"smallwin\" + randNum; \r\n");
      out.write("\t\t//alert(\"About to popup window: \" + pageAddress + \"...\" + myNewWindowName + \" ... \" + windowParams);\r\n");
      out.write("\t\tpopupWindow = window.open(pageAddress, myNewWindowName, windowParams);\r\n");
      out.write("\t\tpopupWindow.focus();\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1467\r\n");
      out.write("function createSmallConfirmPopup(pageAddress, width, height)\r\n");
      out.write("{   \r\n");
      out.write("\tif (width == null) {\r\n");
      out.write("\t\twidth = \"350\";\r\n");
      out.write("\t}\r\n");
      out.write("\tif (height == null) {\r\n");
      out.write("\t\theight = \"150\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\tvar xOffset = (window.screen.width  - width)/2;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar yOffset = 0;\r\n");
      out.write("\t\tif(xOffset < 0)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\txOffset = 0;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar windowParams = null;\r\n");
      out.write("\t\t//IE\r\n");
      out.write("\t\tif(window.navigator.appName =='Microsoft Internet Explorer')\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\twindowParams = 'width=' + width + ',height=' + height +',status=no,resizable=no,titlebar=no,menubar=no,scrollbars=no,left='+ xOffset +',top=60';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse //Netscape\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\twindowParams = 'width=' + width + ',height=' + height +',status=no,resizable=no,titlebar=no,menubar=no,scrollbars=no,pageXOffset='+ xOffset +',pageYOffset=60';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//get the two digit random number and append it to window name\r\n");
      out.write("\t\tvar randNumStr = new String(Math.random());\t\t\t\r\n");
      out.write("\t\trandNum = randNumStr.substr(randNumStr.indexOf(\".\")+1, 2);\r\n");
      out.write("\t\tvar myNewWindowName = \"smallwin\" + randNum; \r\n");
      out.write("\t\t//alert(\"About to popup window: \" + pageAddress + \"...\" + myNewWindowName + \" ... \" + windowParams);\r\n");
      out.write("\t\tpopupWindow = window.open(pageAddress, myNewWindowName, windowParams);\r\n");
      out.write("\t\t//popupWindow.focus();\r\n");
      out.write("\t\treturn popupWindow;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function createSelectPopup(pageAddress, theForm, theField)\r\n");
      out.write("{//alert(\"About to createPopup \" + pageAddress);\r\n");
      out.write("\tcreatePopup(pageAddress, popupWidth, popUpHeight);\r\n");
      out.write("\t\r\n");
      out.write("\tparentForm = theForm;\r\n");
      out.write("\tparentField = theField;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function playSound(){ \r\n");
      out.write("  document.getElementById(\"sound\").innerHTML= '<embed src=\"");
      out.print(basePath);
      out.write("media/DING.WAV\" loop=false autostart=\"true\" width=\"0\" height=\"0\" hidden>' \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function IsNumeric(strString)\r\n");
      out.write("   //  check for valid numeric strings\t\r\n");
      out.write("   {\r\n");
      out.write("   var strValidChars = \"0123456789.-\";\r\n");
      out.write("   var strChar;\r\n");
      out.write("   var blnResult = true;\r\n");
      out.write("\r\n");
      out.write("   if (strString.length == 0) return false;\r\n");
      out.write("\r\n");
      out.write("   //  test strString consists of valid characters listed above\r\n");
      out.write("   for (i = 0; i < strString.length && blnResult == true; i++)\r\n");
      out.write("      {\r\n");
      out.write("      strChar = strString.charAt(i);\r\n");
      out.write("      if (strValidChars.indexOf(strChar) == -1)\r\n");
      out.write("         {\r\n");
      out.write("         blnResult = false;\r\n");
      out.write("         }\r\n");
      out.write("      }\r\n");
      out.write("   return blnResult;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function containsNewLine(strString)\r\n");
      out.write("   //  check for newline character\t\r\n");
      out.write("   {\r\n");
      out.write("   var strNewLine = '\\n';\r\n");
      out.write("   var foundNewLine = false;\r\n");
      out.write("\r\n");
      out.write("   if (strString.length == 0) return false;\r\n");
      out.write("\r\n");
      out.write("   //  test strString \r\n");
      out.write("   if (strString.indexOf(strNewLine) >= 0) {\r\n");
      out.write("       foundNewLine = true;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   return foundNewLine;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function noenter() {\r\n");
      out.write("  return !(window.event && window.event.keyCode == 13); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla # 1400 \r\n");
      out.write("function focusOnFirstInputField() {\r\n");
      out.write("  var autofocusInput = jQuery(\"input[autofocus]\");\r\n");
      out.write("  if(autofocusInput.length > 0) {\r\n");
      out.write("    autofocusInput.get(0).focus();\r\n");
      out.write("    return;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var bFound = false;\r\n");
      out.write("\r\n");
      out.write("  // for each form\r\n");
      out.write("  for (f=0; f < document.forms.length; f++)\r\n");
      out.write("  {\r\n");
      out.write("    // for each element in each form\r\n");
      out.write("    for(i=0; i < document.forms[f].length; i++)\r\n");
      out.write("    {\r\n");
      out.write("      // if it's not a hidden element\r\n");
      out.write("      if (document.forms[f][i].type != \"hidden\")\r\n");
      out.write("      {\r\n");
      out.write("        // and it's not disabled\r\n");
      out.write("        if (document.forms[f][i].disabled != true)\r\n");
      out.write("        {\r\n");
      out.write("            // set the focus to it\r\n");
      out.write("            document.forms[f][i].focus();\r\n");
      out.write("            //alert(\"setting focus on \" + document.forms[f][i].name);\r\n");
      out.write("            var bFound = true;\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("      // if found in this element, stop looking\r\n");
      out.write("      if (bFound == true)\r\n");
      out.write("        break;\r\n");
      out.write("    }\r\n");
      out.write("    // if found in this form, stop looking\r\n");
      out.write("    if (bFound == true)\r\n");
      out.write("      break;\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1883 (cloned and modified isDirty() to work for a single form field)\r\n");
      out.write("function isFormFieldDirty(eElem) {\r\n");
      out.write("\r\n");
      out.write("\t\tif (eElem.disabled == true || eElem.readOnly == true)\r\n");
      out.write("\t\t{\t// Field is disabled, so don't need to check if dirty\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tvar eName = eElem.name;\r\n");
      out.write("\t\tif ( eName.length == 0 )\r\n");
      out.write("\t\t{\t// Name of field is 0 length, so don't do check\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\tvar eType = eElem.type;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif( \"hidden\" == eType ) {\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write(" \t\t\r\n");
      out.write("\t\tif (\"text\" == eType || \"TEXTAREA\" == eElem.tagName) {\r\n");
      out.write("\t\t\tif (eElem.value != eElem.defaultValue) {\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\tif (\"checkbox\" == eElem.type || \"radio\" == eElem.type) {\r\n");
      out.write("\t\t\tif (eElem.checked != eElem.defaultChecked) {\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif (\"SELECT\" == eElem.tagName) {\r\n");
      out.write("\t\t\tcheckDftSelected(eElem);\r\n");
      out.write("\t\t\tvar numOpts = eElem.options.length;\r\n");
      out.write("\t\t\tfor (var j=0; j < numOpts; j++) {\r\n");
      out.write("\t\t\t\tvar eopt = eElem.options[j];\r\n");
      out.write("\t\t\t\tif (eopt.selected != eopt.defaultSelected && eopt.value != null && eopt.value.length > 0) {\r\n");
      out.write("\t\t\t\t\treturn true;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\treturn false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1467\r\n");
      out.write("// Has an input-capable field on the form changed?\r\n");
      out.write("//If ever there is a problem with this - make sure there are no duplicate values in drop downs!!\r\n");
      out.write("function isDirty(form, ignoreFields) {\r\n");
      out.write("\tvar elemLength = form.elements.length;\r\n");
      out.write("\tfor (var i=0; i < elemLength; i++) {\r\n");
      out.write("\t\tvar eElem = form.elements[i];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (eElem.disabled == true || eElem.readOnly == true)\r\n");
      out.write("\t\t{\t// Field is disabled, so don't need to check if dirty\r\n");
      out.write("\t\t\tcontinue;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar eName = eElem.name;\r\n");
      out.write("\t\tif ( eName.length == 0 )\r\n");
      out.write("\t\t{\t// Name of field is 0 length, so don't do check\r\n");
      out.write("\t\t\tcontinue;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (ignoreFields != null && ignoreFields.indexOf(eName) > -1 )\r\n");
      out.write("\t\t{\t// Found field name in list of fields to ignore\r\n");
      out.write("\t\t\tcontinue;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar eType = eElem.type;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif( \"hidden\" == eType ) {\r\n");
      out.write("\t\t\t\tcontinue;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (\"text\" == eType || \"TEXTAREA\" == eElem.tagName) {\r\n");
      out.write("\t\t\tif (eElem.value != eElem.defaultValue) {\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\tif (\"checkbox\" == eElem.type || \"radio\" == eElem.type) {\r\n");
      out.write("\t\t\tif (eElem.checked != eElem.defaultChecked) {\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (\"SELECT\" == eElem.tagName) {\r\n");
      out.write("\t\t\tcheckDftSelected(eElem);\r\n");
      out.write("\t\t\tvar numOpts = eElem.options.length;\r\n");
      out.write("\t\t\tfor (var j=0; j < numOpts; j++) {\r\n");
      out.write("\t\t\t\tvar eopt = eElem.options[j];\r\n");
      out.write("\t\t\t\tif (eopt.selected != eopt.defaultSelected && eopt.value != null && eopt.value.length > 0) {\r\n");
      out.write("\t\t\t\t\treturn true;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t// If a page requires special functionality for checking if it's dirty that isn't global, \r\n");
      out.write("\t// create a pageIsDirty method\r\n");
      out.write("\tif(window.pageIsDirty)\r\n");
      out.write("\t{\r\n");
      out.write("\t\treturn pageIsDirty(form);\r\n");
      out.write("\t}\r\n");
      out.write("\treturn false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1467\r\n");
      out.write("function checkDftSelected(eElem)\r\n");
      out.write("{\r\n");
      out.write("\tvar numOpts = eElem.options.length;\r\n");
      out.write("\tfor (var j=0; j < numOpts; j++) {\r\n");
      out.write("\t\tvar eopt = eElem.options[j];\r\n");
      out.write("\t\tif (eopt.defaultSelected) {\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("        //bugzilla 1518 freeform notes bug fixed\r\n");
      out.write("\t\t} else {\r\n");
      out.write("          if (eopt.selected) {\r\n");
      out.write("            return;\r\n");
      out.write("          }\r\n");
      out.write("        }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(numOpts > 0)\r\n");
      out.write("\t{\r\n");
      out.write("\t\teElem.options[0].defaultSelected = true;\r\n");
      out.write("\t\teElem.options[0].selected = true;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1942 added externalNotesDisabled parameter\r\n");
      out.write("function popupNotes (form, tableId, id, externalNotesDisabled) {\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("    //if  no errors otherwise on page -> go to add test popup\r\n");
      out.write("\tvar context = '");
      out.print( request.getContextPath() );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("\t// Get the sessionID\r\n");
      out.write("\t var sessionid = '';\r\n");
      out.write("\r\n");
      out.write("\t var sessionIndex = form.action.indexOf(';');\r\n");
      out.write("\t if(sessionIndex >= 0){\r\n");
      out.write("\t\t var queryIndex = form.action.indexOf('?');\r\n");
      out.write("\t\t var length = form.action.length;\r\n");
      out.write("\t\t if (queryIndex > sessionIndex) {\r\n");
      out.write("\t\t \tlength = queryIndex;\r\n");
      out.write("\t\t }\r\n");
      out.write("\t\t sessionid = form.action.substring(sessionIndex,length);\r\n");
      out.write("\t }\r\n");
      out.write("\tvar refTableKey = '");
      out.print( IActionConstants.NOTES_REFTABLE );
      out.write("';\r\n");
      out.write("\tvar refIdKey = '");
      out.print( IActionConstants.NOTES_REFID );
      out.write("';\r\n");
      out.write("\tvar disableExternalKey = '");
      out.print( IActionConstants.NOTES_EXTERNAL_NOTES_DISABLED );
      out.write("';\r\n");
      out.write("\tvar parmString = \"?\" + refTableKey + \"=\" + tableId + \"&\" + refIdKey + \"=\" +id + \"&\" + disableExternalKey +  \"=\" + externalNotesDisabled;\r\n");
      out.write("\tvar href = context + \"/NotesPopup.do\" + parmString + sessionid;\r\n");
      out.write("    //alert(\"href \"+ href);\r\n");
      out.write("\t\r\n");
      out.write("\tcreatePopup( href, null, null );\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*bugzilla 1664*/\r\n");
      out.write("/*\r\n");
      out.write("This script changes \"body.style.zoom\" according to the screen resolution.\r\n");
      out.write("You can freely distribute this script.\r\n");
      out.write("Please don't remove any comment.\r\n");
      out.write("See more details on: http://digilander.libero.it/indipendent_res/\r\n");
      out.write("Do this during body onload\r\n");
      out.write("*/\r\n");
      out.write("function getCorrectWidth() {\r\n");
      out.write("    return screen.width; //1280;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getCorrectHeight() {\r\n");
      out.write("    return 1024;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function check_width() {\r\n");
      out.write("   var correctwidth=getCorrectWidth();\r\n");
      out.write("   // You can personalize \"correctwidth\" according to your layout.\r\n");
      out.write("\r\n");
      out.write("   if (screen.width!=correctwidth) {\r\n");
      out.write("     document.body.style.zoom = screen.width / correctwidth;\t\t\t\t\r\n");
      out.write("   }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1803\r\n");
      out.write("function setCookie(cookieName,cookieValue,nDays) {\r\n");
      out.write(" var today = new Date();\r\n");
      out.write(" var expire = new Date();\r\n");
      out.write(" if (nDays==null || nDays==0) nDays=1;\r\n");
      out.write(" expire.setTime(today.getTime() + (3600000*24*nDays));\r\n");
      out.write(" document.cookie = cookieName+\"=\"+escape(cookieValue) + \";expires=\"+expire.toGMTString();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1803\r\n");
      out.write("function getCookie(cookieName) {\r\n");
      out.write(" if (document.cookie.length>0) {\r\n");
      out.write("  var c_start=document.cookie.indexOf(cookieName + \"=\");\r\n");
      out.write("  if (c_start!=-1) { \r\n");
      out.write("    c_start=c_start + cookieName.length + 1;\r\n");
      out.write("    var c_end=document.cookie.indexOf(\";\",c_start);\r\n");
      out.write("    if (c_end==-1) c_end=document.cookie.length;\r\n");
      out.write("    return unescape(document.cookie.substring(c_start,c_end));\r\n");
      out.write("   } \r\n");
      out.write(" }\r\n");
      out.write(" return \"\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1810\r\n");
      out.write("\r\n");
      out.write("var keysPressed = [];\r\n");
      out.write("\r\n");
      out.write("function selectAsYouType(e)\r\n");
      out.write("{\r\n");
      out.write("\r\n");
      out.write("    var keyChar; var keyNum;\r\n");
      out.write("    var comboBox;\r\n");
      out.write("    if (window.event) // IE\r\n");
      out.write("    {\r\n");
      out.write("        keyNum = e.keyCode;            \r\n");
      out.write("    }\r\n");
      out.write("    else\r\n");
      out.write("    {\r\n");
      out.write("        return true; // browser doesn't support DOM, do default processing.\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    keyChar = String.fromCharCode(keyNum);\r\n");
      out.write("    comboBox = e.srcElement;\r\n");
      out.write("    \r\n");
      out.write("    if (!comboBox)\r\n");
      out.write("    {\r\n");
      out.write("        return true; // if DOM didn't work, do default processing\r\n");
      out.write("    }\r\n");
      out.write("    if (keyNum == 27) // Esc key\r\n");
      out.write("    {\r\n");
      out.write("        clearKeysPressed(comboBox);\r\n");
      out.write("    }\r\n");
      out.write("    else\r\n");
      out.write("    {\r\n");
      out.write("        return selectElement(comboBox, keyChar);\r\n");
      out.write("    }\r\n");
      out.write("    return true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function clearKeysPressed(e)\r\n");
      out.write("{\r\n");
      out.write("    if (e.srcElement)\r\n");
      out.write("        keysPressed[e.srcElement]=\"\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function selectElement(comboBox, keyChar)\r\n");
      out.write("{\r\n");
      out.write("    var i = 0;\r\n");
      out.write("    var keysPressedSoFar =     keysPressed[comboBox] || \"\";\r\n");
      out.write("    keysPressedSoFar += keyChar;\r\n");
      out.write("    keysPressed[comboBox] = keysPressedSoFar;\r\n");
      out.write("    var options = comboBox.options;\r\n");
      out.write("    for (i = 0; i < options.length; ++i)\r\n");
      out.write("    {\r\n");
      out.write("        if (options[i].text.toUpperCase().indexOf(keysPressedSoFar.toUpperCase(), 0) == 0)\r\n");
      out.write("        {\r\n");
      out.write("            comboBox.selectedIndex = i;\r\n");
      out.write("            return false; // don't do default processing\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    keysPressed[comboBox] = String(keyChar); // didn't match start of any option, so reset keysPressed to just this key\r\n");
      out.write("    return true;        \r\n");
      out.write("}\r\n");
      out.write("//END bugzilla 1810\r\n");
      out.write("\r\n");
      out.write("//bugzilla 1413\r\n");
      out.write("function enterKeyPressed(e){ //e is event object passed from function invocation\r\n");
      out.write("var characterCode;\r\n");
      out.write("\r\n");
      out.write("if(e && e.which){ //if which property of event object is supported (NN4)\r\n");
      out.write("e = e\r\n");
      out.write("characterCode = e.which //character code is contained in NN4's which property\r\n");
      out.write("}\r\n");
      out.write("else{\r\n");
      out.write("e = event\r\n");
      out.write("characterCode = e.keyCode //character code is contained in IE's keyCode property\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("if(characterCode == 13){ //if generated character code is equal to ascii 13 (if enter key)\r\n");
      out.write("return true; \r\n");
      out.write("}\r\n");
      out.write("else{\r\n");
      out.write("return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("}");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
