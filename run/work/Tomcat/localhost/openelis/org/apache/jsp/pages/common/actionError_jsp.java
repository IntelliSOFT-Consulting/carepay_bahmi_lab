/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.12
 * Generated at: 2021-07-01 06:49:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.struts.taglib.TagUtils;
import org.apache.struts.action.*;
import org.apache.struts.Globals;
import java.util.Iterator;
import javax.servlet.jsp.JspException;
import us.mn.state.health.lims.common.action.IActionConstants;
import us.mn.state.health.lims.common.util.StringUtil;
import us.mn.state.health.lims.common.util.resources.ResourceLocator;
import us.mn.state.health.lims.common.util.validator.ActionError;
import us.mn.state.health.lims.common.util.SystemConfiguration;

public final class actionError_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


String path = "";
String basePath = "";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/struts-logic.tld", Long.valueOf(1625121650000L));
    _jspx_dependants.put("/WEB-INF/struts-html.tld", Long.valueOf(1625121650000L));
    _jspx_dependants.put("/WEB-INF/struts-bean.tld", Long.valueOf(1625121650000L));
    _jspx_dependants.put("/WEB-INF/struts-tiles.tld", Long.valueOf(1625121650000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

path = request.getContextPath();
basePath = path + "/";

      out.write("\n");
      out.write("\n");
      out.write("<script language=\"JavaScript1.2\">\n");
      out.write("\n");
      out.write("function onLoad() {\n");
      out.write("\n");
      out.write("  \t// bugzilla 1397 If a page requires special functionality before load that isn't global, create a\n");
      out.write("\t// preOnLoad method (if we need to run js before errors popup)\n");
      out.write("\tif(window.prePageOnLoad)\n");
      out.write("\t{  \n");
      out.write("\t\tprePageOnLoad();\n");
      out.write("\t}\n");
      out.write("       \n");
      out.write("  \t// If a page requires special functionality on load that isn't global, create a\n");
      out.write("\t// pageOnLoad method\n");
      out.write("\tif(window.pageOnLoad)\n");
      out.write("\t{  \n");
      out.write("\t\tpageOnLoad();\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("}\n");
      out.write("\n");
      out.write("// The Struts action form object associated with this page. It is initialized in\n");
      out.write("// the onLoad() function below to ensure that it is available when defined.\n");
      out.write("var myActionForm;\n");
      out.write("\n");
      out.write("\t\t// Initialize myActionForm variable after load.\n");
      out.write("\t\tmyActionForm = document.forms[\"");
      out.print( (String)request.getAttribute(IActionConstants.FORM_NAME) );
      out.write("\"];\n");
      out.write("\n");
      out.write("        ");
 ActionMessages errors = null;
        String fieldName = null;
        try {
        	out.println("var messages = null;");
            //errors = RequestUtils.getActionErrors(pageContext, Globals.ERROR_KEY);
            errors = TagUtils.getInstance().getActionMessages(pageContext, Globals.ERROR_KEY);
 
            Iterator iterator = errors.get();
            ActionMessage error = null;
            String messages = null;
            String message = null;           
            String moduleNotAllowMessageKey = "login.error.module.not.allow";             
                        
			java.util.Locale locale = (java.util.Locale)request.getSession().getAttribute(Globals.LOCALE_KEY);

            while (iterator.hasNext()) {
              	//error = (ActionError)iterator.next();   
                 error = (ActionMessage)iterator.next();   
                                   
            	message =
					ResourceLocator.getInstance().getMessageResources().getMessage(
					locale,
                    error.getKey(),
                    error.getValues()).replace("\r\n","");

        		if( message == null ){
        			message = error.getKey();
        		}
        
               	if (messages == null) {
            		messages = message;
					out.println("messages = \"" + message +"\"");
				}
				else {
					out.println("messages = messages + '\\r\\n' + \"" + message +"\"");
				}

				if (error instanceof us.mn.state.health.lims.common.util.validator.ActionError) {
					if (fieldName == null) {
						fieldName = ((us.mn.state.health.lims.common.util.validator.ActionError)error).getFormField();
					}
				}
            }
        
            out.println("var focusElement = null;");
            if (fieldName != null) {
            	out.println("for (var i=0; i<document.forms.length; i++) {");
            	out.println("for (var j=0; j<document.forms[i].elements.length; j++) {");
            	out.println("var element = document.forms[i].elements[j];");
            	out.println("if (element != null && element.type != 'hidden' && element.disabled != true && (element.getAttribute('name') == '" + fieldName + "' || element.id == '" + fieldName + "')) {");
            	out.println("focusElement = element");
            	out.println("}");
            	out.println("}");
            	out.println("}");
            }
    
            // Add code to search links also
            if ( fieldName != null )
            {
             	out.println("if ( focusElement == null ) {");
            	out.println("for ( var k=0; k < document.links.length; k++ ) {");
            	out.println("   if ( document.links[k].id == '" + fieldName + "Link') {");
            	out.println("      focusElement = document.links[k];");
            	out.println("   }");
            	out.println("}");
            	out.println("}");
            }
                        
            String errorKey = null;
            if ( error != null )
                errorKey = (String)error.getKey(); 
            
            //user wants to display the error message on the top instead of popup for (module not allow only)                                                                    
            if (messages != null) {
         		out.println("if (focusElement != null) {focusElement.focus();}");
         		if ( !errorKey.equals(moduleNotAllowMessageKey) && !SystemConfiguration.getInstance().errorsToScreen())
         		    out.println("alert(messages);");         		    
                else{
                	out.println("var lines = messages.split('\\r\\n');");
                    out.println("document.write('<center><h1 class=\"alert-error\">');");
                	out.println("for( var i = 0; i < lines.length; i++)");
                    out.println("document.write(lines[i] + '</br>');");
                    out.println("document.write('</h1></center>');");
                }
            }
            //removing the global error from the session
            request.getSession().removeAttribute(Globals.ERROR_KEY);
            
 	 
        } catch (JspException e) {
                //RequestUtils.saveException(pageContext, e);
                TagUtils.getInstance().saveException(pageContext, e);
        }
        
      out.write("\n");
      out.write("\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
